PG_HOST=postgres
PG_PORT=5432
PG_DB=auth_database
PG_USER=app
PG_PASSWORD=123qwe

REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=123
REDIS_DB=0

# Flask secret key
SECRET_KEY=123321

YANDEX_CLIENT_ID=
YANDEX_CLIENT_SECRET=
YANDEX_AUTHORIZE_URL=https://oauth.yandex.ru/authorize
YANDEX_ACCESS_TOKEN_URL=https://oauth.yandex.ru/token

GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=
GOOGLE_AUTHORIZE_URL=https://accounts.google.com/o/oauth2/v2/auth
GOOGLE_ACCESS_TOKEN_URL=https://oauth2.googleapis.com/token
GOOGLE_SERVER_METADATA_URL=https://accounts.google.com/.well-known/openid-configuration

JWT_SECRET_KEY=123qwe

# Время жизни access токена.
# Указывается в часах
JWT_ACCESS_LIFETIME=1

# Время жизни refresh токена.
# Указывается в днях
JWT_REFRESH_LIFETIME=7

# Список алгиротмнов для создания токенов.
# При нескольких алгоритмах использовать запятую как разделитель
JWT_ALGORITHMS=HS256

API_TITLE=AUTH API
API_VERSION=1.0
API_DESCRIPTION="Сервис AUTH для аутентификации и авторизациии в онлайн кинотеатре. Реализует управление личными данными пользователя, а также административные операции по типу назначения роли и многое другое. Для успешного выполнения запросов необходимы следующие вещи:
  - Заголовок **X-Request-Id**

Также для большинства запросов необходим **JWT** в **cookies[access_token]** или в **headers[Authorization: Bearer {}]**.

Чтобы проверить функционал сервиса выполните регистрацию, а затем аутентификацию. Если хотите воспользоваться админскими ручками, то создайте пользователя с правами администратора (читайте **README.md** проекта).
"
OPENAPI_VERSION=3.0.2
OPENAPI_URL_PREFIX=/admin/api/v1/auth
OPENAPI_JSON_PATH=/openapi.json
OPENAPI_SWAGGER_UI_PATH=/swagger

SQLALCHEMY_ECHO=False

DEBUG=False
OTEL_RESOURCE_ATTRIBUTES=service.name=AUTH
OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
OTEL_INSTRUMENTATION_HTTP_CAPTURE_HEADERS_SERVER_REQUEST=X-Request-Id

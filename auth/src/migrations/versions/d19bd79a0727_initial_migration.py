"""Initial migration

Revision ID: d19bd79a0727
Revises:
Create Date: 2023-04-26 14:39:35.561057

"""
import uuid
from datetime import UTC, datetime

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd19bd79a0727'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    op.execute('CREATE SCHEMA IF NOT EXISTS auth')
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('roles',
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('modified', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_roles')),
    sa.UniqueConstraint('id', name=op.f('uq_roles_id')),
    sa.UniqueConstraint('name', name=op.f('uq_roles_name')),
    schema='auth'
    )
    op.create_table('users',
    sa.Column('username', sa.String(length=80), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('password_hash', postgresql.BYTEA(length=40), nullable=False),
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('modified', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['auth.roles.id'], name=op.f('fk_users_role_id_roles')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('email', name=op.f('uq_users_email')),
    sa.UniqueConstraint('id', name=op.f('uq_users_id')),
    sa.UniqueConstraint('username', name=op.f('uq_users_username')),
    schema='auth'
    )
    op.create_table('devices',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('user_agent', sa.Text(), nullable=False),
    sa.Column('ip_address', postgresql.INET(), nullable=False),
    sa.Column('logged_in_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name=op.f('fk_devices_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'logged_in_at', name=op.f('pk_devices')),
    sa.UniqueConstraint('id', 'logged_in_at', name=op.f('uq_devices_id')),
    schema='auth',
    postgresql_partition_by='RANGE (logged_in_at)'
    )
    op.create_table('social_account',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('social_id', sa.Text(), nullable=False),
    sa.Column('social_name', sa.String(length=40), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('modified', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name=op.f('fk_social_account_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_social_account')),
    sa.UniqueConstraint('id', name=op.f('uq_social_account_id')),
    sa.UniqueConstraint('social_id', 'social_name', name=op.f('uq_social_account_social_id')),
    schema='auth'
    )
    op.create_table('users_info',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('first_name', sa.String(length=64), nullable=True),
    sa.Column('last_name', sa.String(length=64), nullable=True),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('city', sa.String(length=90), nullable=True),
    sa.Column('country', sa.String(length=64), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('modified', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name=op.f('fk_users_info_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users_info')),
    sa.UniqueConstraint('id', name=op.f('uq_users_info_id')),
    sa.UniqueConstraint('user_id', name=op.f('uq_users_info_user_id')),
    schema='auth'
    )
    # ### end Alembic commands ###

    meta = sa.MetaData()
    meta.reflect(bind=op.get_bind(), only=('roles',))
    roles_table = sa.Table('roles', meta)
    roles_created = datetime.now(tz=UTC)
    op.bulk_insert(
        roles_table,
        [
            {
                'id': uuid.uuid4(),
                'name': 'admin',
                'description': '',
                'created': roles_created,
                'modified': roles_created,
            },
            {
                'id': uuid.uuid4(),
                'name': 'user',
                'description': '',
                'created': roles_created,
                'modified': roles_created,
            },
            {
                'id': uuid.uuid4(),
                'name': 'subscriber',
                'description': '',
                'created': roles_created,
                'modified': roles_created,
            },
        ]
    )

    op.execute(
        """
        CREATE TABLE IF NOT EXISTS auth.devices_y2023q2
        PARTITION OF devices FOR VALUES FROM ('2023-04-01') TO ('2023-06-30')
        """,
    )
    op.execute(
        """
        CREATE TABLE IF NOT EXISTS auth.devices_y2023q3
        PARTITION OF devices FOR VALUES FROM ('2023-07-01') TO ('2023-09-30')
        """,
    )
    op.execute(
        """
        CREATE TABLE IF NOT EXISTS auth.devices_y2023q4
        PARTITION OF devices FOR VALUES FROM ('2023-10-01') TO ('2023-12-31')
        """,
    )


def downgrade():
    op.drop_table('devices_y2023q2', schema='auth')
    op.drop_table('devices_y2023q3', schema='auth')
    op.drop_table('devices_y2023q4', schema='auth')

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users_info', schema='auth')
    op.drop_table('social_account', schema='auth')
    op.drop_table('devices', schema='auth')
    op.drop_table('users', schema='auth')
    op.drop_table('roles', schema='auth')
    # ### end Alembic commands ###
